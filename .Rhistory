# Demo script for ODE students
# solves the system x'=-y, y'=x
# with the initial condition x(0)=0.3, y(0)=0.6
# plots the solution for 0<=t<=200 with t calculated at 3000 steps
# loading the required packages
library(ggplot2)
library(grid)
library(gridExtra)
library(deSolve)
# if you don't have them, please install
# setting the working directory: modify this command for your working directory
setwd("/Users/orlenkoirina/Dropbox/Data Analysis with R")
# Parameters of the plot:
a <- -1; b <- 1; # interval for x
c <- -1; d <- 1; # interval for y
m <- 20;  n <- 20; # the number of steps in the grid
K <<- 0.05 # scaling constant
# RHS of the ODE
RHS.F <<- function(x,y) {
-y
}
RHS.G <<- function(x,y) {
x
}
# In order to plot anything in R we need to create a data frame.
# Our data frame "vf" (from vector field) has the following columns:
# values of x and y,
# dx, dy - values of F(x,y) and G(x,y),
# r - the norm of the vector field
vf <- expand.grid(x=seq(a,b,by=(b-a)/m),y=seq(c,d,by=(d-c)/n))
vf$dx <- with(vf,RHS.F(x,y)) # the first component of the vector field
vf$dy <- with(vf,RHS.G(x,y)) # the second component of the vector field
vf$r <- with(vf, sqrt(dx^2+dy^2)) # the norm of the vector field
# the following sequence of commands creates the plot of the vector field
VF.plot <- ggplot(data=vf, aes(x=x, y=y)) +
geom_segment(colour="black",
aes(xend=x+K*dx/r, yend=y+K*dy/r),
arrow = arrow(length = unit(0.15,"cm"))) +
ylim(c-0.1,d+0.1) + xlim(a-0.1,b+0.1) + xlab("x") + ylab("y")
VF.plot
# now we'll solve the ODE:
times <- seq(0, 200, by = 200/3000)
state <- c(X=0.3, Y=0.6)
# the following is the RHS of the ODE prepared for solving
# here, t is a vector of time values
# state is a list of vectors
# parameters are not used, but for you it would be conveneint to use parameters
RHS <- function(t, state, parameters) {
with(as.list(c(state)),{
# rate of change
dX <- RHS.F(X,Y)
dY <- RHS.G(X,Y)
list(c(dX, dY))
})   # end with(as.list ...
}
# the output of the function RHS is a list of vectors of the same dimenstion as state
# the following is actually solving the ODE:
out <- ode(y = state, times = times, func = RHS, parms = NULL)
# now we'll convert the output of deSolve into a data frame with columns x and y
# it's important that the names "x" and "y" are the same
# as the names "x" and "y" in the data frame "VF
solution <- data.frame(x=out[,2],y=out[,3])
# now we'll produce the plot of the vector field together with the solution
VF.plot+geom_path(data=solution, colour="red")
# finally, we'll save the output as a PDF file
dev.copy(pdf,"fig_ode_demo_r.pdf")
dev.off()
install.packages("deSolve")
library(deSolve)
# if you don't have them, please install
# setting the working directory: modify this command for your working directory
setwd("/Users/orlenkoirina/Dropbox/Data Analysis with R")
# Parameters of the plot:
a <- -1; b <- 1; # interval for x
c <- -1; d <- 1; # interval for y
m <- 20;  n <- 20; # the number of steps in the grid
K <<- 0.05 # scaling constant
# RHS of the ODE
RHS.F <<- function(x,y) {
-y
}
RHS.G <<- function(x,y) {
x
}
# In order to plot anything in R we need to create a data frame.
# Our data frame "vf" (from vector field) has the following columns:
# values of x and y,
# dx, dy - values of F(x,y) and G(x,y),
# r - the norm of the vector field
vf <- expand.grid(x=seq(a,b,by=(b-a)/m),y=seq(c,d,by=(d-c)/n))
vf$dx <- with(vf,RHS.F(x,y)) # the first component of the vector field
vf$dy <- with(vf,RHS.G(x,y)) # the second component of the vector field
vf$r <- with(vf, sqrt(dx^2+dy^2)) # the norm of the vector field
# the following sequence of commands creates the plot of the vector field
VF.plot <- ggplot(data=vf, aes(x=x, y=y)) +
geom_segment(colour="black",
aes(xend=x+K*dx/r, yend=y+K*dy/r),
arrow = arrow(length = unit(0.15,"cm"))) +
ylim(c-0.1,d+0.1) + xlim(a-0.1,b+0.1) + xlab("x") + ylab("y")
VF.plot
# now we'll solve the ODE:
times <- seq(0, 200, by = 200/3000)
state <- c(X=0.3, Y=0.6)
# the following is the RHS of the ODE prepared for solving
# here, t is a vector of time values
# state is a list of vectors
# parameters are not used, but for you it would be conveneint to use parameters
RHS <- function(t, state, parameters) {
with(as.list(c(state)),{
# rate of change
dX <- RHS.F(X,Y)
dY <- RHS.G(X,Y)
list(c(dX, dY))
})   # end with(as.list ...
}
# the output of the function RHS is a list of vectors of the same dimenstion as state
# the following is actually solving the ODE:
out <- ode(y = state, times = times, func = RHS, parms = NULL)
# now we'll convert the output of deSolve into a data frame with columns x and y
# it's important that the names "x" and "y" are the same
# as the names "x" and "y" in the data frame "VF
solution <- data.frame(x=out[,2],y=out[,3])
# now we'll produce the plot of the vector field together with the solution
VF.plot+geom_path(data=solution, colour="red")
# finally, we'll save the output as a PDF file
dev.copy(pdf,"fig_ode_demo_r.pdf")
dev.off()
Sol.plot <- ggplot(data=solution, aes(x=t, y=x)) + geom_path()
Sol.plot
solution <- data.frame(t=out[,1],x=out[,2],y=out[,3])
Sol.plot <- ggplot(data=solution, aes(x=t, y=x)) + geom_path()
Sol.plot
# let us now plot x and y vs t
solution_x <- data.frame(t=out[,1],x=out[,2])
solution_y <- data.frame(t=out[,1],x=out[,3])
Sol.plot <- ggplot(data=solution_x, aes(x=t, y=x)) + geom_path()
Sol.plot + geom_path(data=solution_y, colour="blue")
VF.plot
# now we'll solve the ODE:
times <- seq(0, 25, by = 25/3000)
state <- c(X=0.3, Y=0.6)
# the following is the RHS of the ODE prepared for solving
# here, t is a vector of time values
# state is a list of vectors
# parameters are not used, but for you it would be conveneint to use parameters
RHS <- function(t, state, parameters) {
with(as.list(c(state)),{
# rate of change
dX <- RHS.F(X,Y)
dY <- RHS.G(X,Y)
list(c(dX, dY))
})   # end with(as.list ...
}
# the output of the function RHS is a list of vectors of the same dimenstion as state
# the following is actually solving the ODE:
out <- ode(y = state, times = times, func = RHS, parms = NULL)
# now we'll convert the output of deSolve into a data frame with columns x and y
# it's important that the names "x" and "y" are the same
# as the names "x" and "y" in the data frame "VF
trajectory <- data.frame(x=out[,2],y=out[,3])
# now we'll produce the plot of the vector field together with the solution
VF.plot+geom_path(data=trajectory, colour="red")
# finally, we'll save the output as a PDF file
dev.copy(pdf,"fig_ode_demo_r.pdf")
dev.off()
# let us now plot x and y vs t
solution_x <- data.frame(t=out[,1],x=out[,2])
solution_y <- data.frame(t=out[,1],x=out[,3])
Sol.plot <- ggplot(data=solution_x, aes(x=t, y=x)) + geom_path()
Sol.plot + geom_path(data=solution_y, colour="blue")
Sol.plot <- ggplot(data=solution_x, aes(x=t, y=x, colour='green')) + geom_path()
# the next command prints Sol.plot plus the data frame for y(t)
Sol.plot + geom_path(data=solution_y, colour="blue")
shiny::runApp('C:/Users/fduzhin/Dropbox/Data Analysis with R/ODE scores 2016')
runApp('C:/Users/fduzhin/Dropbox/Data Analysis with R/ODE scores 2016')
runApp('C:/Users/fduzhin/Dropbox/Data Analysis with R/ODE scores 2016')
install.packages("markdown")
q()
getwd()
0.22+2*0.0074*50
0.22+2*0.0074*100
0.22*100+0.0074*100^2
0.22*50+0.0074*50^2
0.22*50+0.0071*50^2
58/4.9
0.5*58/4.9
t <- 0.5*58/4.9
58*t-4.9*t^2
t
0.5*58/4.9
t <- 5.9
58*t-4.9*t^2
63/9.8
18*2*pi/365
32*pi/365
r=5.5
V=180
V/(pi*r^2)
15^2
15^2/4
7.5^2
160/(56*pi)
h=14
-150/(pi*h^2/4)
0.8*(3/4)
0.8*(4/3)
32/30
16/15
0.8*(5/3)
x=6
flats <- read.csv("reflections.csv")
rawFloorArea <- as.character(flats$Floor.Area)
flats$Area <- as.numeric(regmatches(rawFloorArea,regexpr("[0-9]+",rawFloorArea)))
head(flats)
qplot(data=flats,x=Area,y=Rent)
library(ggplot2)
flats <- read.csv("reflections.csv")
rawFloorArea <- as.character(flats$Floor.Area)
flats$Area <- as.numeric(regmatches(rawFloorArea,regexpr("[0-9]+",rawFloorArea)))
head(flats)
qplot(data=flats,x=Area,y=Rent)
library(ggplot2)
setwd("C://Users//fduzhin//Dropbox//Outreach Fedor//Singapore Poly - regression")
flats <- read.csv("reflections.csv")
rawFloorArea <- as.character(flats$Floor.Area)
flats$Area <- as.numeric(regmatches(rawFloorArea,regexpr("[0-9]+",rawFloorArea)))
head(flats)
qplot(data=flats,x=Area,y=Rent)
qplot(data=flats,x=Area,y=Rent)
ggplot(data=flats,aes(x=Area,y=Rent)) +
geom_point()
flats <- read.csv("reflections.csv")
rawFloorArea <- as.character(flats$Floor.Area)
flats$Area <- as.numeric(regmatches(rawFloorArea,regexpr("[0-9]+",rawFloorArea)))
head(flats)
flats <- flats[flats$Area<3000,]
ggplot(data=flats,aes(x=Area,y=Rent)) +
geom_point() + geom_smooth(method=lm)
qplot(data=diamonds[diamonds$clarity=="IF"&&diamonds$color=="J",],x=carat,y=price)
qplot(data=diamonds[diamonds$clarity=="IF"&diamonds$color=="J",],x=carat,y=price)
head(diamonds)
qplot(data=diamonds[diamonds$clarity=="IF"&diamonds$color=="E",],x=carat,y=price)
qplot(data=diamonds[diamonds$clarity=="IF"&diamonds$color=="J",],x=carat,y=price)
qplot(data=diamonds[diamonds$clarity=="IF"&diamonds$color=="I",],x=carat,y=price)
qplot(data=diamonds[diamonds$clarity=="IF"&diamonds$color=="J",],x=carat,y=price)
unique(diamonds$color)
qplot(data=diamonds[diamonds$clarity=="IF"&diamonds$color=="D",],x=carat,y=price)
qplot(data=diamonds[diamonds$clarity=="IF"&diamonds$color=="E",],x=carat,y=price)
qplot(data=diamonds[diamonds$clarity=="IF"&diamonds$color=="F",],x=carat,y=price)
qplot(data=diamonds[diamonds$clarity=="IF"&diamonds$color=="G",],x=carat,y=price)
